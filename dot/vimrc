set nocompatible
set hlsearch
set modeline
set smartindent
set number
set backspace=indent,eol,start " backspace over everything in insert mode
syntax on

set switchbuf=usetab

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

setlocal spell spelllang=en
set cinoptions=:0
" :args ~/src/myproject/**/*.ttl | argdo execute "normal gg=G" | update
set noet
" SHIFT-Del are Cut
vnoremap <S-Del> "+x

" CTRL-Insert are Copy
vnoremap <C-Insert> "+y

" SHIFT-Insert are Paste
map <S-Insert> "+gP
cmap <S-Insert> <C-R>+

filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'Align'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'altercation/vim-colors-solarized'
Plugin 'kana/vim-operator-user'
Plugin 'rhysd/vim-clang-format'

call vundle#end()

set background=dark
set colorcolumn=81
if has('gui_running')
	highlight ColorColumn guibg=#252525
	colorscheme solarized
else
	" highlight ColorColumn guibg=#252525
	set t_Co=16
	set mouse=
	colorscheme solarized
	" colorscheme torte
	" highlight ColorColumn ctermbg=8
endif

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

filetype plugin indent on

if has("gui_running")
	runtime ftplugin/man.vim
	nmap K :Man <cword><CR>
	set guioptions-=m  "remove menu bar
	set guioptions-=T  "remove toolbar
	set guioptions+=LlRrb
	set guioptions-=LlRrb
	set guifont=Monospace\ 12
endif


function! CheckPatchFunction()
	let s:save_makeprg = &makeprg
	set makeprg=checkpatch.pl\ %
	make
	let &makeprg = s:save_makeprg
endfunction

command! CheckPatch :call CheckPatchFunction()

let g:load_doxygen_syntax=1
let g:ycm_add_preview_to_completeopt=1
let g:ycm_cache_omnifunc=0
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:ycm_confirm_extra_conf = 0

let g:clang_format#auto_formatexpr = 1
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
nmap <Leader>C :ClangFormatAutoToggle<CR>

" Filetypes
autocmd BufRead,BufNewFile *.g set syntax=antlr3
autocmd BufRead,BufNewFile *.ll set filetype=llvm
autocmd BufRead,BufNewFile *.rl set filetype=ragel

"
" buffer/split/tab re-use magic
"

function! s:BufHidden(buffer)
  let bufno = bufnr(a:buffer)
  let listed_buffers = ''

  redir => listed_buffers
  silent ls
  redir END

  for line in split(listed_buffers, "\n")
    let components = split(line)
    if components[0] == bufno
      return match(components[1], 'h') != -1
    endif
  endfor
  return 0
endfunction

function! s:GotoOrOpen(command, ...)
  for file in a:000
    " bufwinnr() doesn't see windows in other tabs, meaning we open them again
    " instead of switching to the other tab; but bufexists() sees hidden
    " buffers, and if we try to open one of those, we get an unwanted split.
    if bufwinnr(file) != -1 || (bufexists(file) && !s:BufHidden(file))
      exec "sb " . file
    else
      exec a:command . " " . file
    endif
  endfor
endfunction

command! -nargs=+ GotoOrOpen call s:GotoOrOpen(<f-args>)

let g:CommandTAcceptSelectionCommand = 'GotoOrOpen e'
let g:CommandTAcceptSelectionTabCommand = 'GotoOrOpen tabe'
let g:CommandTAcceptSelectionSplitCommand = 'GotoOrOpen sp'
let g:CommandTAcceptSelectionVSplitCommand = 'GotoOrOpen vs'

nnoremap <silent> <leader>b :CommandTMRU<CR>
